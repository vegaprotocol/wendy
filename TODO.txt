TODO List

 * Test, test, test
 * Verify that I handeled all slices correctly and didnt'
   use a reference when I should have copied
 * The list of delivered Transaxtions (D) is uncapped. This needs
   to be fixed somehow (ideally without causing double votes).
   Relevant for a real implementation, for the simulator it has less impact
   unless someone wants ot run it for days.
 * Market Identifiers can be optimised.
   They are currently implemented in the blocking function
   It would actually even better to have validator (id.mid) to
   keep them completely separate. Only on block delivery would all
   Q of the leader be flashed. This would massively save resources on
   recompute(). Doesn't matter for the simulation, though
 * Make the network simulator more controlable to simulate different
   networks. Also, build an active adversary that tries to create bad
   situations (which is surprisingly hard)
 * Clean up junk code and ugly code stuff that is c in go
 * The handling of sequence numbers is somewhat sub-optimal. Could
   do with a more clever data structure
 * For now, we only support one fairness definition. Switching and code for timed
   fairness is already in, but completely untested.
Known Issues

Note for a real implementation
The sequence number thing is fragile. Some recovery is needed
 * If a sequence number relates to a request that got
   scheduled, we can skip it
 * Some resend mechanism

There's some checkes we don't do yet; for example, we know that
Validators don't vote twice for the same tx, so we don't check it.

We have no signatures or proof-of-following-the-protocol in here.
In the real implementation, every block proposal needs to come
with the necessary signatures proving it's valid. If things get
wired, that might be a lot of signatures; there is probably
a lot of room for improvement there to optimise this, e.g.,
resending every vote I get right away to all others (with signatures,
time and order) so they can replicate my state (or use a reliable broadcast
so they know).
To keep latency down, we could send the signature blob while the
block with the corresponding txs is processed by the blockchain,
and do a post-validity check. New can of worms though...

Finally, we currently assume that the underlying blockchain can consume
all transactions Wendy puts in. If that is not the case, there's two
things we need to do:
 - When transactions are collected, we need to recompute the Br[i] on
   the transactions in Q to find out which of them need to go into 
   the same block (this can have changed a little since we put the 
   transaction into Q due to more information being available, and some transactions
   that looked like they need to be in the same block no longer do). Then
   we need some interaction between Wendy and the blockchain to negotiate
   which of those blobs goes in first. The rest should work fine, as Wendy only
   considers a transaction done when she sees the finalised block. 